<!-- natural sort -->
<%# @predicted_prots.keys.sort_by{|ele| ele.split("_")[1].to_i }.each do |key| %>
<% @predicted_prots.keys.sort_by { |key| key.to_s.naturalized }.each do |key| %>
    <% prot_name = key =~ /(.+)_\d+$/ ? $1 : key # extract protein name %>
    <% value = @predicted_prots[key] %>
    <% all_hit_list = @predicted_prots.keys.grep(/_\d+$/) {|v| v.gsub(/[^\d]/, '').to_i} %>
    <% seq, seq_pos, aa_pct = "", "", ""%>
    <% tab_seq, tab_aa, tab_ctg = {}, {}, {} %>
    <% tab_seq = {table_class: "predTable", th_left: "Predicted protein sequence", 
        th_right: "CTG position", col_left: "leftcol", col_right: "rightcol"} %>
    <% tab_aa = {table_class: "predTable", 
        th_left: "CTG Position", th_middle: "Distribution of amino acids in reference data", th_right: "Number of amino acids", 
        col_left: "", col_middle: "", col_right: ""} %>
    <% tab_ctg = {table_class: "refTable", th_left: "Amino acid", th_right: "CTG usage in reference data", 
        col_left: "", col_right: ""} %>
    <% basename = prot_name.gsub(" ", "-").downcase %>

    <% if @minor_error.find{|ele| ele.include?(prot_name)} then %>
        <!-- no gene predicted for this gene, an error occured -->
    <% else %>
        <%= content_tag(:h3, "#{prot_name} (Hit #{value[:hit_shown]}/#{value[:n_hits]})") %>
        <div class="pred_data_wrapper" id="pred_data_<%= basename %>" style="clear:both">
        <%=
            if value[:ctg_pos].any? then   
                seq, seq_pos, aa_pct = format_seq(value[:pred_prot], value[:ctg_pos], value[:ref_chem])

                if value[:ref_chem].any? then 
                    # content_tag(:h4, "CTG positions aligned with discriminative sites of reference data") +
                    draw_table(value[:ref_chem].keys, aa_pct, value[:ref_chem].collect {|_, v| v[:seq_num]}, tab_aa) +
                    content_tag(:p, pluralize(value[:ref_chem].values[0][:seq_num].to_s, "sequence") << " in reference alignment") 
                else
                    content_tag(:i, "No CTG position aligned with discriminative sites of reference data")
                end +

                if value[:ref_ctg].any? then
                    # content_tag(:h4, "CTG codons in reference data at same positions") +
                    draw_table(["Serine", "Leucine"], [value[:ref_ctg][:ser], value[:ref_ctg][:leu]], tab_ctg)
                else
                    tag(:br) +
                    content_tag(:i, "No CTG codons in reference data at same positions")
                    tag(:br)
                end +

                tag(:br) +

                ### this part is for showing the table containing predicted sequence and CTG positions
                content_tag(:b, "Show predicted sequence ") +
                image_tag("icons/down.png", 
                    :id => "#{basename}_#{value[:hit_shown]}_img", 
                    :title => "Show/hide predicted sequence", 
                    :onclick => "toggle_icon(this, $('#seq_#{basename}_#{value[:hit_shown]}'))"
                ) +
                content_tag(:div, draw_table(seq, seq_pos, tab_seq), 
                    :class => "wrapper", 
                    :id => "seq_#{basename}_#{value[:hit_shown]}", 
                    :style => "display:none;") +

                tag(:br) +

                ### this part is for showing the alignment
                content_tag(:b, "Show alignment ") +
                link_to( 
                    image_tag("icons/down.png",
                            id: "show_alignment_#{basename}_#{value[:hit_shown]}_img",
                            :title => "Show/hide alignment",
                            onclick: "toggle_icon(this, $('#alignment_#{basename}_#{value[:hit_shown]}'))"),
                    show_alignment_path(prot: prot_name, hit: value[:hit_shown]),
                    {:remote => true}
                ) +
                # button_to("Show alignment", show_alignment_path(prot: prot_name, hit: value[:hit_shown]), 
                #    id: "show_alignment_button_#{basename}_#{value[:hit_shown]}", 
                #    onclick: "hide_show_waiting('show');", remote: true, method: :get) + 
                content_tag(:div, "", :id => "alignment_#{basename}_#{value[:hit_shown]}", :style => "display:none") + 
                tag(:br)
            else
                content_tag(:div, value[:message], :class => "pred_nothing")
            end +

            if value[:hit_shown] < value[:n_hits] &&
               (all_hit_list.blank? || value[:hit_shown] == all_hit_list.max) then
               # show button if there are more hits than the shown ones and (in case of multiple hits per prot) if its the last shown hit
                content_tag(:p, 
                    content_tag(:b, "Use next BLAST hits for gene prediction ", :class => "line") +
                    link_to(
                        image_tag("icons/down.png",
                            # onclick: "img.src = this.src.replace('/down.png','/up.png');"
                        ), 
                        predict_more_path(prot: prot_name, hit: value[:hit_shown]), id: "pred_more_button", 
                        onclick: "hide_show_waiting('show');", remote: true, method: :get,
                    ),
                    id: "pred_more_button",
                )

                # content_tag(:p,
                #     button_to("Predict more", predict_more_path(prot: prot_name, hit: value[:hit_shown]), id: "pred_more_button", 
                #         onclick: "hide_show_waiting('show');", remote: true, method: :get),
                #     :class => "vertical_line"
                # )
            end
        %>    
        </div>
    <% end %>
<% end %> 
